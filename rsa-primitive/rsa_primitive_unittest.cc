#include <stdio.h>
#include "gtest/gtest.h"
#include "gmp.h"
#include "rsa.h"

TEST(RSAPrimitive, I2OSPTest)
{
    mpz_t n;
    int len;
    char buf[512];

    mpz_init(n);

    /* len = 16 */
    {
        char str1[] = "1234567890";
        char result1[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90};

        mpz_set_str(n, str1, 16);

        len = sizeof(result1);
        I2OSP(n, buf, len);

        EXPECT_EQ(0, memcmp(result1, buf, len));
    }

    /* len = 256, only padding one 0 on the left most */
    {
        char str2[] = "71485fa4116382afe9142d7d5580d798a41e7b4f73f505618978002f137f5c209fd1f377e824e7e0c4b3e44dc1f8e250272efdb715a48d434d8a01e3965c7b1f65aec349d963815d78998221fc2c3be3508cc69fa22b4fc3c9a2365309c5eae72094b2c22ae176704806a1994b7e4fe5109558a0bfad6964bd7d6c14cbda74b";
        char result2[] =
        {
            0x07, 0x14, 0x85, 0xfa, 0x41, 0x16, 0x38, 0x2a, 0xfe, 0x91, 0x42, 0xd7, 0xd5, 0x58, 0x0d, 0x79,
            0x8a, 0x41, 0xe7, 0xb4, 0xf7, 0x3f, 0x50, 0x56, 0x18, 0x97, 0x80, 0x02, 0xf1, 0x37, 0xf5, 0xc2,
            0x09, 0xfd, 0x1f, 0x37, 0x7e, 0x82, 0x4e, 0x7e, 0x0c, 0x4b, 0x3e, 0x44, 0xdc, 0x1f, 0x8e, 0x25,
            0x02, 0x72, 0xef, 0xdb, 0x71, 0x5a, 0x48, 0xd4, 0x34, 0xd8, 0xa0, 0x1e, 0x39, 0x65, 0xc7, 0xb1,
            0xf6, 0x5a, 0xec, 0x34, 0x9d, 0x96, 0x38, 0x15, 0xd7, 0x89, 0x98, 0x22, 0x1f, 0xc2, 0xc3, 0xbe,
            0x35, 0x08, 0xcc, 0x69, 0xfa, 0x22, 0xb4, 0xfc, 0x3c, 0x9a, 0x23, 0x65, 0x30, 0x9c, 0x5e, 0xae,
            0x72, 0x09, 0x4b, 0x2c, 0x22, 0xae, 0x17, 0x67, 0x04, 0x80, 0x6a, 0x19, 0x94, 0xb7, 0xe4, 0xfe,
            0x51, 0x09, 0x55, 0x8a, 0x0b, 0xfa, 0xd6, 0x96, 0x4b, 0xd7, 0xd6, 0xc1, 0x4c, 0xbd, 0xa7, 0x4b
        };
        mpz_set_str(n, str2, 16);

        len = sizeof(result2);
        I2OSP(n, buf, len);

        EXPECT_EQ(0, memcmp(result2, buf, len));
    }

    /* len = 512, padding many 0s on the left most */
    {
        char str3[] = "10001";
        char result3[] =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01
        };
        mpz_set_str(n, str3, 16);

        len = sizeof(result3);
        I2OSP(n, buf, len);

        EXPECT_EQ(0, memcmp(result3, buf, len));
    }

    /* len = 512 */
    {
        char str4[] = "bad47a84c1782e4dbdd913f2a261fc8b65838412c6e45a2068ed6d7f16e9cdf4462b39119563cafb74b9cbf25cfd544bdae23bff0ebe7f6441042b7e109b9a8afaa056821ef8efaab219d21d6763484785622d918d395a2a31f2ece8385a8131e5ff143314a82e21afd713bae817cc0ee3514d4839007ccb55d68409c97a18ab62fa6f9f89b3f94a2777c47d6136775a56a9a0127f682470bef831fbec4bcd7b5095a7823fd70745d37d1bf72b63c4b1b4a3d0581e74bf9ade93cc46148617553931a79d92e9e488ef47223ee6f6c061884b13c9065b591139de13c1ea2927491ed00fb793cd68f463f5f64baa53916b46c818ab99706557a1c2d50d232577d1";
        char result4[] = {
            0xba, 0xd4, 0x7a, 0x84, 0xc1, 0x78, 0x2e, 0x4d, 0xbd, 0xd9, 0x13, 0xf2, 0xa2, 0x61, 0xfc, 0x8b,
            0x65, 0x83, 0x84, 0x12, 0xc6, 0xe4, 0x5a, 0x20, 0x68, 0xed, 0x6d, 0x7f, 0x16, 0xe9, 0xcd, 0xf4,
            0x46, 0x2b, 0x39, 0x11, 0x95, 0x63, 0xca, 0xfb, 0x74, 0xb9, 0xcb, 0xf2, 0x5c, 0xfd, 0x54, 0x4b,
            0xda, 0xe2, 0x3b, 0xff, 0x0e, 0xbe, 0x7f, 0x64, 0x41, 0x04, 0x2b, 0x7e, 0x10, 0x9b, 0x9a, 0x8a,
            0xfa, 0xa0, 0x56, 0x82, 0x1e, 0xf8, 0xef, 0xaa, 0xb2, 0x19, 0xd2, 0x1d, 0x67, 0x63, 0x48, 0x47,
            0x85, 0x62, 0x2d, 0x91, 0x8d, 0x39, 0x5a, 0x2a, 0x31, 0xf2, 0xec, 0xe8, 0x38, 0x5a, 0x81, 0x31,
            0xe5, 0xff, 0x14, 0x33, 0x14, 0xa8, 0x2e, 0x21, 0xaf, 0xd7, 0x13, 0xba, 0xe8, 0x17, 0xcc, 0x0e,
            0xe3, 0x51, 0x4d, 0x48, 0x39, 0x00, 0x7c, 0xcb, 0x55, 0xd6, 0x84, 0x09, 0xc9, 0x7a, 0x18, 0xab,
            0x62, 0xfa, 0x6f, 0x9f, 0x89, 0xb3, 0xf9, 0x4a, 0x27, 0x77, 0xc4, 0x7d, 0x61, 0x36, 0x77, 0x5a,
            0x56, 0xa9, 0xa0, 0x12, 0x7f, 0x68, 0x24, 0x70, 0xbe, 0xf8, 0x31, 0xfb, 0xec, 0x4b, 0xcd, 0x7b,
            0x50, 0x95, 0xa7, 0x82, 0x3f, 0xd7, 0x07, 0x45, 0xd3, 0x7d, 0x1b, 0xf7, 0x2b, 0x63, 0xc4, 0xb1,
            0xb4, 0xa3, 0xd0, 0x58, 0x1e, 0x74, 0xbf, 0x9a, 0xde, 0x93, 0xcc, 0x46, 0x14, 0x86, 0x17, 0x55,
            0x39, 0x31, 0xa7, 0x9d, 0x92, 0xe9, 0xe4, 0x88, 0xef, 0x47, 0x22, 0x3e, 0xe6, 0xf6, 0xc0, 0x61,
            0x88, 0x4b, 0x13, 0xc9, 0x06, 0x5b, 0x59, 0x11, 0x39, 0xde, 0x13, 0xc1, 0xea, 0x29, 0x27, 0x49,
            0x1e, 0xd0, 0x0f, 0xb7, 0x93, 0xcd, 0x68, 0xf4, 0x63, 0xf5, 0xf6, 0x4b, 0xaa, 0x53, 0x91, 0x6b,
            0x46, 0xc8, 0x18, 0xab, 0x99, 0x70, 0x65, 0x57, 0xa1, 0xc2, 0xd5, 0x0d, 0x23, 0x25, 0x77, 0xd1
        };

        mpz_set_str(n, str4, 16);

        len = sizeof(result4);
        I2OSP(n, buf, len);

        EXPECT_EQ(0, memcmp(result4, buf, len));
    }
    mpz_clear(n);
}

TEST(RSAPrimitive, OS2IPTest)
{
    mpz_t x, y;
    int len;

    mpz_inits(x, y, NULL);

    /* len = 16 */
    {
        char str1[] = "1234567890";
        char octet1[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90};

        mpz_set_str(x, str1, 16);

        len = sizeof(octet1);
        OS2IP(octet1, len, y);

        EXPECT_EQ(0, mpz_cmp(x, y));
    }

    /* len = 256*/
    {
        char str2[] = "71485fa4116382afe9142d7d5580d798a41e7b4f73f505618978002f137f5c209fd1f377e824e7e0c4b3e44dc1f8e250272efdb715a48d434d8a01e3965c7b1f65aec349d963815d78998221fc2c3be3508cc69fa22b4fc3c9a2365309c5eae72094b2c22ae176704806a1994b7e4fe5109558a0bfad6964bd7d6c14cbda74b";
        char octet2[] =
        {
            0x07, 0x14, 0x85, 0xfa, 0x41, 0x16, 0x38, 0x2a, 0xfe, 0x91, 0x42, 0xd7, 0xd5, 0x58, 0x0d, 0x79,
            0x8a, 0x41, 0xe7, 0xb4, 0xf7, 0x3f, 0x50, 0x56, 0x18, 0x97, 0x80, 0x02, 0xf1, 0x37, 0xf5, 0xc2,
            0x09, 0xfd, 0x1f, 0x37, 0x7e, 0x82, 0x4e, 0x7e, 0x0c, 0x4b, 0x3e, 0x44, 0xdc, 0x1f, 0x8e, 0x25,
            0x02, 0x72, 0xef, 0xdb, 0x71, 0x5a, 0x48, 0xd4, 0x34, 0xd8, 0xa0, 0x1e, 0x39, 0x65, 0xc7, 0xb1,
            0xf6, 0x5a, 0xec, 0x34, 0x9d, 0x96, 0x38, 0x15, 0xd7, 0x89, 0x98, 0x22, 0x1f, 0xc2, 0xc3, 0xbe,
            0x35, 0x08, 0xcc, 0x69, 0xfa, 0x22, 0xb4, 0xfc, 0x3c, 0x9a, 0x23, 0x65, 0x30, 0x9c, 0x5e, 0xae,
            0x72, 0x09, 0x4b, 0x2c, 0x22, 0xae, 0x17, 0x67, 0x04, 0x80, 0x6a, 0x19, 0x94, 0xb7, 0xe4, 0xfe,
            0x51, 0x09, 0x55, 0x8a, 0x0b, 0xfa, 0xd6, 0x96, 0x4b, 0xd7, 0xd6, 0xc1, 0x4c, 0xbd, 0xa7, 0x4b
        };
        mpz_set_str(x, str2, 16);

        len = sizeof(octet2);
        OS2IP(octet2, len, y);

        EXPECT_EQ(0, mpz_cmp(x, y));
    }

    /* len = 512, padding many 0s on the left most */
    {
        char str3[] = "10001";
        char octet3[] =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01
        };
        mpz_set_str(x, str3, 16);

        len = sizeof(octet3);
        OS2IP(octet3, len, y);

        EXPECT_EQ(0, mpz_cmp(x, y));
    }

    /* len = 512 */
    {
        char str4[] = "bad47a84c1782e4dbdd913f2a261fc8b65838412c6e45a2068ed6d7f16e9cdf4462b39119563cafb74b9cbf25cfd544bdae23bff0ebe7f6441042b7e109b9a8afaa056821ef8efaab219d21d6763484785622d918d395a2a31f2ece8385a8131e5ff143314a82e21afd713bae817cc0ee3514d4839007ccb55d68409c97a18ab62fa6f9f89b3f94a2777c47d6136775a56a9a0127f682470bef831fbec4bcd7b5095a7823fd70745d37d1bf72b63c4b1b4a3d0581e74bf9ade93cc46148617553931a79d92e9e488ef47223ee6f6c061884b13c9065b591139de13c1ea2927491ed00fb793cd68f463f5f64baa53916b46c818ab99706557a1c2d50d232577d1";
        char octet4[] = {
            0xba, 0xd4, 0x7a, 0x84, 0xc1, 0x78, 0x2e, 0x4d, 0xbd, 0xd9, 0x13, 0xf2, 0xa2, 0x61, 0xfc, 0x8b,
            0x65, 0x83, 0x84, 0x12, 0xc6, 0xe4, 0x5a, 0x20, 0x68, 0xed, 0x6d, 0x7f, 0x16, 0xe9, 0xcd, 0xf4,
            0x46, 0x2b, 0x39, 0x11, 0x95, 0x63, 0xca, 0xfb, 0x74, 0xb9, 0xcb, 0xf2, 0x5c, 0xfd, 0x54, 0x4b,
            0xda, 0xe2, 0x3b, 0xff, 0x0e, 0xbe, 0x7f, 0x64, 0x41, 0x04, 0x2b, 0x7e, 0x10, 0x9b, 0x9a, 0x8a,
            0xfa, 0xa0, 0x56, 0x82, 0x1e, 0xf8, 0xef, 0xaa, 0xb2, 0x19, 0xd2, 0x1d, 0x67, 0x63, 0x48, 0x47,
            0x85, 0x62, 0x2d, 0x91, 0x8d, 0x39, 0x5a, 0x2a, 0x31, 0xf2, 0xec, 0xe8, 0x38, 0x5a, 0x81, 0x31,
            0xe5, 0xff, 0x14, 0x33, 0x14, 0xa8, 0x2e, 0x21, 0xaf, 0xd7, 0x13, 0xba, 0xe8, 0x17, 0xcc, 0x0e,
            0xe3, 0x51, 0x4d, 0x48, 0x39, 0x00, 0x7c, 0xcb, 0x55, 0xd6, 0x84, 0x09, 0xc9, 0x7a, 0x18, 0xab,
            0x62, 0xfa, 0x6f, 0x9f, 0x89, 0xb3, 0xf9, 0x4a, 0x27, 0x77, 0xc4, 0x7d, 0x61, 0x36, 0x77, 0x5a,
            0x56, 0xa9, 0xa0, 0x12, 0x7f, 0x68, 0x24, 0x70, 0xbe, 0xf8, 0x31, 0xfb, 0xec, 0x4b, 0xcd, 0x7b,
            0x50, 0x95, 0xa7, 0x82, 0x3f, 0xd7, 0x07, 0x45, 0xd3, 0x7d, 0x1b, 0xf7, 0x2b, 0x63, 0xc4, 0xb1,
            0xb4, 0xa3, 0xd0, 0x58, 0x1e, 0x74, 0xbf, 0x9a, 0xde, 0x93, 0xcc, 0x46, 0x14, 0x86, 0x17, 0x55,
            0x39, 0x31, 0xa7, 0x9d, 0x92, 0xe9, 0xe4, 0x88, 0xef, 0x47, 0x22, 0x3e, 0xe6, 0xf6, 0xc0, 0x61,
            0x88, 0x4b, 0x13, 0xc9, 0x06, 0x5b, 0x59, 0x11, 0x39, 0xde, 0x13, 0xc1, 0xea, 0x29, 0x27, 0x49,
            0x1e, 0xd0, 0x0f, 0xb7, 0x93, 0xcd, 0x68, 0xf4, 0x63, 0xf5, 0xf6, 0x4b, 0xaa, 0x53, 0x91, 0x6b,
            0x46, 0xc8, 0x18, 0xab, 0x99, 0x70, 0x65, 0x57, 0xa1, 0xc2, 0xd5, 0x0d, 0x23, 0x25, 0x77, 0xd1
        };

        mpz_set_str(x, str4, 16);

        len = sizeof(octet4);
        OS2IP(octet4, len, y);

        EXPECT_EQ(0, mpz_cmp(x, y));
    }
    mpz_clears(x, y, NULL);
}

TEST(RSAPrimitive, RSAEPTest)
{
    printf("No Tests!\n");
}

TEST(RSAPrimitive, RSADPTest)
{
    printf("No Tests!\n");
}

TEST(RSAPrimitive, RSASP1Test)
{
    printf("No Tests!\n");
}

TEST(RSAPrimitive, RSAVP1Test)
{
    printf("No Tests!\n");
}