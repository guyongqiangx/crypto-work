#include <stdio.h>
#include "gtest/gtest.h"
#include "gmp.h"
#include "fakerand.h"
#include "rsa.h"

TEST(RSAES, OAEPEncryptTest)
{
    /* pkcs-1v2-1-vec\oaep-int.txt */
    char str_n[] = "bbf82f090682ce9c2338ac2b9da871f7368d07eed41043a440d6b6f07454f51f"
                   "b8dfbaaf035c02ab61ea48ceeb6fcd4876ed520d60e1ec4619719d8a5b8b807f"
                   "afb8e0a3dfc737723ee6b4b7d93a2584ee6a649d060953748834b2454598394e"
                   "e0aab12d7b61a51f527a9a41f6c1687fe2537298ca2a8f5946f8e5fd091dbdcb";
    char str_e[] = "11"; /* 0x11 */

    //char str_l[] = ""; /* Empty String */

    /* message */
    unsigned char str_m[] = {0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49} ; /* "d436e99569fd32a7c8a05bbc90d32c49" ; */

    unsigned char str_c[128];
    unsigned char seed[] = {0xaa, 0xfd, 0x12, 0xf6, 0x59, 0xca, 0xe6, 0x34, 0x89, 0xb4, 0x79, 0xe5, 0x07, 0x6d, 0xde, 0xc2,
                   0xf0, 0x6c, 0xb5, 0x8f};

    /* cipher */
#if 0
    char cipher[] = "1253e04dc0a5397bb44a7ab87e9bf2a039a33d1e996fc82a94ccd30074c95df7"
                    "63722017069e5268da5d1c0b4f872cf653c11df82314a67968dfeae28def04bb"
                    "6d84b1c31d654a1970e5783bd6eb96a024c2ca2f4a90fe9f2ef5c9c140e5bb48"
                    "da9536ad8700c84fc9130adea74e558d51a74ddf85d8b50de96838d6063e0955";
#else
    unsigned char cipher[] = {
        0x12, 0x53, 0xe0, 0x4d, 0xc0, 0xa5, 0x39, 0x7b, 0xb4, 0x4a, 0x7a, 0xb8, 0x7e, 0x9b, 0xf2, 0xa0,
        0x39, 0xa3, 0x3d, 0x1e, 0x99, 0x6f, 0xc8, 0x2a, 0x94, 0xcc, 0xd3, 0x00, 0x74, 0xc9, 0x5d, 0xf7,
        0x63, 0x72, 0x20, 0x17, 0x06, 0x9e, 0x52, 0x68, 0xda, 0x5d, 0x1c, 0x0b, 0x4f, 0x87, 0x2c, 0xf6,
        0x53, 0xc1, 0x1d, 0xf8, 0x23, 0x14, 0xa6, 0x79, 0x68, 0xdf, 0xea, 0xe2, 0x8d, 0xef, 0x04, 0xbb,
        0x6d, 0x84, 0xb1, 0xc3, 0x1d, 0x65, 0x4a, 0x19, 0x70, 0xe5, 0x78, 0x3b, 0xd6, 0xeb, 0x96, 0xa0,
        0x24, 0xc2, 0xca, 0x2f, 0x4a, 0x90, 0xfe, 0x9f, 0x2e, 0xf5, 0xc9, 0xc1, 0x40, 0xe5, 0xbb, 0x48,
        0xda, 0x95, 0x36, 0xad, 0x87, 0x00, 0xc8, 0x4f, 0xc9, 0x13, 0x0a, 0xde, 0xa7, 0x4e, 0x55, 0x8d,
        0x51, 0xa7, 0x4d, 0xdf, 0x85, 0xd8, 0xb5, 0x0d, 0xe9, 0x68, 0x38, 0xd6, 0x06, 0x3e, 0x09, 0x55
    };
#endif

    RSAPublicKey pubKey;
    int res;

    RSA_PublicKey_Init(str_n, str_e, &pubKey);

    Set_Random_Data(seed, sizeof(seed));
    memset(str_c, 0, sizeof(str_c));

    res = RSAES_OAEP_Encrypt(&pubKey, str_m, sizeof(str_m), "", 0, HASH_ALG_SHA1, str_c, 128);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(cipher, str_c, sizeof(cipher)));

    RSA_PublicKey_UnInit(&pubKey);
}

TEST(RSAES, OAEPDecryptTest)
{
    char str_p[] = "eecfae81b1b9b3c908810b10a1b5600199eb9f44aef4fda493b81a9e3d84f632"
                   "124ef0236e5d1e3b7e28fae7aa040a2d5b252176459d1f397541ba2a58fb6599";
    char str_q[] = "c97fb1f027f453f6341233eaaad1d9353f6c42d08866b1d05a0f2035028b9d86"
                   "9840b41666b42e92ea0da3b43204b5cfce3352524d0416a5a441e700af461503";
    char str_dP[] = "54494ca63eba0337e4e24023fcd69a5aeb07dddc0183a4d0ac9b54b051f2b13e"
                    "d9490975eab77414ff59c1f7692e9a2e202b38fc910a474174adc93c1f67c981";
    char str_dQ[] = "471e0290ff0af0750351b7f878864ca961adbd3a8a7e991c5c0556a94c3146a7"
                    "f9803f8f6f8ae342e931fd8ae47a220d1b99a495849807fe39f9245a9836da3d";
    char str_qInv[] = "b06c4fdabb6301198d265bdbae9423b380f271f73453885093077fcd39e2119f"
                      "c98632154f5883b167a967bf402b4e9e2e0f9656e698ea3666edfb25798039f7";

#if 0
    char str_c[] = "1253e04dc0a5397bb44a7ab87e9bf2a039a33d1e996fc82a94ccd30074c95df7"
                   "63722017069e5268da5d1c0b4f872cf653c11df82314a67968dfeae28def04bb"
                   "6d84b1c31d654a1970e5783bd6eb96a024c2ca2f4a90fe9f2ef5c9c140e5bb48"
                   "da9536ad8700c84fc9130adea74e558d51a74ddf85d8b50de96838d6063e0955";
#else
    unsigned char cipher[] = {
        0x12, 0x53, 0xe0, 0x4d, 0xc0, 0xa5, 0x39, 0x7b, 0xb4, 0x4a, 0x7a, 0xb8, 0x7e, 0x9b, 0xf2, 0xa0,
        0x39, 0xa3, 0x3d, 0x1e, 0x99, 0x6f, 0xc8, 0x2a, 0x94, 0xcc, 0xd3, 0x00, 0x74, 0xc9, 0x5d, 0xf7,
        0x63, 0x72, 0x20, 0x17, 0x06, 0x9e, 0x52, 0x68, 0xda, 0x5d, 0x1c, 0x0b, 0x4f, 0x87, 0x2c, 0xf6,
        0x53, 0xc1, 0x1d, 0xf8, 0x23, 0x14, 0xa6, 0x79, 0x68, 0xdf, 0xea, 0xe2, 0x8d, 0xef, 0x04, 0xbb,
        0x6d, 0x84, 0xb1, 0xc3, 0x1d, 0x65, 0x4a, 0x19, 0x70, 0xe5, 0x78, 0x3b, 0xd6, 0xeb, 0x96, 0xa0,
        0x24, 0xc2, 0xca, 0x2f, 0x4a, 0x90, 0xfe, 0x9f, 0x2e, 0xf5, 0xc9, 0xc1, 0x40, 0xe5, 0xbb, 0x48,
        0xda, 0x95, 0x36, 0xad, 0x87, 0x00, 0xc8, 0x4f, 0xc9, 0x13, 0x0a, 0xde, 0xa7, 0x4e, 0x55, 0x8d,
        0x51, 0xa7, 0x4d, 0xdf, 0x85, 0xd8, 0xb5, 0x0d, 0xe9, 0x68, 0x38, 0xd6, 0x06, 0x3e, 0x09, 0x55
    };
#endif
    unsigned char str_m[128];

    /* message */
    unsigned char message[] = {0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49} ; /* "d436e99569fd32a7c8a05bbc90d32c49" ; */

    RSAPrivateKey privKey;
    unsigned long mLen;
    int res = ERR_OK;

    memset(str_m, 0, sizeof(str_m));

    RSA_PrivateKey_Init_MultiPrime(str_p, str_q, str_dP, str_dQ, str_qInv, &privKey);

    res = RSAES_OAEP_Decrypt(&privKey, cipher, sizeof(cipher), "", 0, HASH_ALG_SHA1, str_m, &mLen);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(message, str_m, mLen));

    RSA_PrivateKey_UnInit(&privKey);
}

TEST(RSAES, OAEPEncDecTest1)
{
    char str_n1[] = "a8b3b284af8eb50b387034a860f146c4919f318763cd6c5598c8ae4811a1e0ab"
                    "c4c7e0b082d693a5e7fced675cf4668512772c0cbc64a742c6c630f533c8cc72"
                    "f62ae833c40bf25842e984bb78bdbf97c0107d55bdb662f5c4e0fab9845cb514"
                    "8ef7392dd3aaff93ae1e6b667bb3d4247616d4f5ba10d4cfd226de88d39f16fb";
    char str_e1[] = "010001";
    char str_d1[] = "53339cfdb79fc8466a655c7316aca85c55fd8f6dd898fdaf119517ef4f52e8fd"
                    "8e258df93fee180fa0e4ab29693cd83b152a553d4ac4d1812b8b9fa5af0e7f55"
                    "fe7304df41570926f3311f15c4d65a732c483116ee3d3d2d0af3549ad9bf7cbf"
                    "b78ad884f84d5beb04724dc7369b31def37d0cf539e9cfcdd3de653729ead5d1";

    unsigned char seed1[] = {
        0x18, 0xb7, 0x76, 0xea, 0x21, 0x06, 0x9d, 0x69, 0x77, 0x6a, 0x33, 0xe9, 0x6b, 0xad, 0x48, 0xe1,
        0xdd, 0xa0, 0xa5, 0xef
    };
    unsigned char message1[] = {
        0x66, 0x28, 0x19, 0x4e, 0x12, 0x07, 0x3d, 0xb0, 0x3b, 0xa9, 0x4c, 0xda, 0x9e, 0xf9, 0x53, 0x23,
        0x97, 0xd5, 0x0d, 0xba, 0x79, 0xb9, 0x87, 0x00, 0x4a, 0xfe, 0xfe, 0x34
    };
    unsigned char cipher1[] = {
        0x35, 0x4f, 0xe6, 0x7b, 0x4a, 0x12, 0x6d, 0x5d, 0x35, 0xfe, 0x36, 0xc7, 0x77, 0x79, 0x1a, 0x3f,
        0x7b, 0xa1, 0x3d, 0xef, 0x48, 0x4e, 0x2d, 0x39, 0x08, 0xaf, 0xf7, 0x22, 0xfa, 0xd4, 0x68, 0xfb,
        0x21, 0x69, 0x6d, 0xe9, 0x5d, 0x0b, 0xe9, 0x11, 0xc2, 0xd3, 0x17, 0x4f, 0x8a, 0xfc, 0xc2, 0x01,
        0x03, 0x5f, 0x7b, 0x6d, 0x8e, 0x69, 0x40, 0x2d, 0xe5, 0x45, 0x16, 0x18, 0xc2, 0x1a, 0x53, 0x5f,
        0xa9, 0xd7, 0xbf, 0xc5, 0xb8, 0xdd, 0x9f, 0xc2, 0x43, 0xf8, 0xcf, 0x92, 0x7d, 0xb3, 0x13, 0x22,
        0xd6, 0xe8, 0x81, 0xea, 0xa9, 0x1a, 0x99, 0x61, 0x70, 0xe6, 0x57, 0xa0, 0x5a, 0x26, 0x64, 0x26,
        0xd9, 0x8c, 0x88, 0x00, 0x3f, 0x84, 0x77, 0xc1, 0x22, 0x70, 0x94, 0xa0, 0xd9, 0xfa, 0x1e, 0x8c,
        0x40, 0x24, 0x30, 0x9c, 0xe1, 0xec, 0xcc, 0xb5, 0x21, 0x00, 0x35, 0xd4, 0x7a, 0xc7, 0x2e, 0x8a
    };
    unsigned char buf[256];

    RSAPublicKey pubKey;
    RSAPrivateKey privKey;

    int res = ERR_OK;
    unsigned long mLen;

    Set_Random_Data(seed1, sizeof(seed1));

    /*
     * RSA OAEP Encryption Test With Public Key
     */
    RSA_PublicKey_Init(str_n1, str_e1, &pubKey);

    res = RSAES_OAEP_Encrypt(&pubKey, message1, sizeof(message1), "", 0, HASH_ALG_SHA1, buf, 128);

    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(cipher1, buf, sizeof(cipher1)));

    RSA_PublicKey_UnInit(&pubKey);

    /*
     * RSA OAEP Decryption Test with Private Key
     */
    RSA_PrivateKey_Init(str_n1, str_d1, &privKey);

    res = RSAES_OAEP_Decrypt(&privKey, cipher1, sizeof(cipher1), "", 0, HASH_ALG_SHA1, buf, &mLen);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(mLen, sizeof(message1));
    EXPECT_EQ(0, memcmp(message1, buf, sizeof(message1)));

    RSA_PrivateKey_UnInit(&privKey);
}

TEST(RSAES, PKCS1v15EncDecTest1)
{
    printf("No PKCS1v15EncDecTest1!\n");
}