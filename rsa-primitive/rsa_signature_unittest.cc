#include <stdio.h>
#include "gtest/gtest.h"
#include "gmp.h"
#include "hash.h"
#include "pss.h"
#include "pkcs1-v1_5.h"
#include "rsa.h"
#include "fakerand.h"

TEST(RSASSA, PSSSignVerifyTest)
{
    char str_n[]    = "a2ba40ee07e3b2bd2f02ce227f36a195024486e49c19cb41bbbdfbba98b22b0e"
                      "577c2eeaffa20d883a76e65e394c69d4b3c05a1e8fadda27edb2a42bc000fe88"
                      "8b9b32c22d15add0cd76b3e7936e19955b220dd17d4ea904b1ec102b2e4de775"
                      "1222aa99151024c7cb41cc5ea21d00eeb41f7c800834d2c6e06bce3bce7ea9a5";
    char str_e[]    = "010001";
    char str_p[]    = "d17f655bf27c8b16d35462c905cc04a26f37e2a67fa9c0ce0dced472394a0df7"
                      "43fe7f929e378efdb368eddff453cf007af6d948e0ade757371f8a711e278f6b";
    char str_q[]    = "c6d92b6fee7414d1358ce1546fb62987530b90bd15e0f14963a5e2635adb6934"
                      "7ec0c01b2ab1763fd8ac1a592fb22757463a982425bb97a3a437c5bf86d03f2f";
    char str_dP[]   = "9d0dbf83e5ce9e4b1754dcd5cd05bcb7b55f1508330ea49f14d4e889550f8256"
                      "cb5f806dff34b17ada44208853577d08e4262890acf752461cea05547601bc4f";
    char str_dQ[]   = "1291a524c6b7c059e90e46dc83b2171eb3fa98818fd179b6c8bf6cecaa476303"
                      "abf283fe05769cfc495788fe5b1ddfde9e884a3cd5e936b7e955ebf97eb563b1";
    char str_qInv[] = "a63f1da38b950c9ad1c67ce0d677ec2914cd7d40062df42a67eb198a176f9742"
                      "aac7c5fea14f2297662b84812c4defc49a8025ab4382286be4c03788dd01d69f";

    unsigned char salt[] = {
        0xe3, 0xb5, 0xd5, 0xd0, 0x02, 0xc1, 0xbc, 0xe5, 0x0c, 0x2b, 0x65, 0xef, 0x88, 0xa1, 0x88, 0xd8,
        0x3b, 0xce, 0x7e, 0x61
    };
    unsigned char message[] = {
        0x85, 0x9e, 0xef, 0x2f, 0xd7, 0x8a, 0xca, 0x00, 0x30, 0x8b, 0xdc, 0x47, 0x11, 0x93, 0xbf, 0x55,
        0xbf, 0x9d, 0x78, 0xdb, 0x8f, 0x8a, 0x67, 0x2b, 0x48, 0x46, 0x34, 0xf3, 0xc9, 0xc2, 0x6e, 0x64,
        0x78, 0xae, 0x10, 0x26, 0x0f, 0xe0, 0xdd, 0x8c, 0x08, 0x2e, 0x53, 0xa5, 0x29, 0x3a, 0xf2, 0x17,
        0x3c, 0xd5, 0x0c, 0x6d, 0x5d, 0x35, 0x4f, 0xeb, 0xf7, 0x8b, 0x26, 0x02, 0x1c, 0x25, 0xc0, 0x27,
        0x12, 0xe7, 0x8c, 0xd4, 0x69, 0x4c, 0x9f, 0x46, 0x97, 0x77, 0xe4, 0x51, 0xe7, 0xf8, 0xe9, 0xe0,
        0x4c, 0xd3, 0x73, 0x9c, 0x6b, 0xbf, 0xed, 0xae, 0x48, 0x7f, 0xb5, 0x56, 0x44, 0xe9, 0xca, 0x74,
        0xff, 0x77, 0xa5, 0x3c, 0xb7, 0x29, 0x80, 0x2f, 0x6e, 0xd4, 0xa5, 0xff, 0xa8, 0xba, 0x15, 0x98,
        0x90, 0xfc
    };

    unsigned char signature[] = {
        0x8d, 0xaa, 0x62, 0x7d, 0x3d, 0xe7, 0x59, 0x5d, 0x63, 0x05, 0x6c, 0x7e, 0xc6, 0x59, 0xe5, 0x44,
        0x06, 0xf1, 0x06, 0x10, 0x12, 0x8b, 0xaa, 0xe8, 0x21, 0xc8, 0xb2, 0xa0, 0xf3, 0x93, 0x6d, 0x54,
        0xdc, 0x3b, 0xdc, 0xe4, 0x66, 0x89, 0xf6, 0xb7, 0x95, 0x1b, 0xb1, 0x8e, 0x84, 0x05, 0x42, 0x76,
        0x97, 0x18, 0xd5, 0x71, 0x5d, 0x21, 0x0d, 0x85, 0xef, 0xbb, 0x59, 0x61, 0x92, 0x03, 0x2c, 0x42,
        0xbe, 0x4c, 0x29, 0x97, 0x2c, 0x85, 0x62, 0x75, 0xeb, 0x6d, 0x5a, 0x45, 0xf0, 0x5f, 0x51, 0x87,
        0x6f, 0xc6, 0x74, 0x3d, 0xed, 0xdd, 0x28, 0xca, 0xec, 0x9b, 0xb3, 0x0e, 0xa9, 0x9e, 0x02, 0xc3,
        0x48, 0x82, 0x69, 0x60, 0x4f, 0xe4, 0x97, 0xf7, 0x4c, 0xcd, 0x7c, 0x7f, 0xca, 0x16, 0x71, 0x89,
        0x71, 0x23, 0xcb, 0xd3, 0x0d, 0xef, 0x5d, 0x54, 0xa2, 0xb5, 0x53, 0x6a, 0xd9, 0x0a, 0x74, 0x7e
    };

    unsigned char buf[128];
    unsigned long len;
    int i, res;

    RSAPublicKey pubKey;
    RSAPrivateKey privKey;

    /*
     * Message Signing Test With Priviate Key
     */
    Set_Random_Data(salt, sizeof(salt));

    RSA_PrivateKey_Init_MultiPrime(str_p, str_q, str_dP, str_dQ, str_qInv, &privKey);

    res = RSASSA_PSS_Sign(&privKey, message, sizeof(message), HASH_ALG_SHA1, buf, &len);
    EXPECT_EQ(ERR_OK, res);

    printf("Sig[%lu]:", len);
    for (i=0; i<128; i++)
    {
        if (i%16 == 0)
            printf("\n");
        printf("%02x ", ((unsigned char *)buf)[i]);
    }
    printf("\n");

    RSA_PrivateKey_UnInit(&privKey);

    /*
     * Signature Verification Test With Public Key
     */
    Set_Random_Data(salt, sizeof(salt));

    RSA_PublicKey_Init(str_n, str_e, &pubKey);

    res = RSASSA_PSS_Verify(&pubKey, message, sizeof(message), HASH_ALG_SHA1, signature, sizeof(signature));
    EXPECT_EQ(ERR_OK, res);

    RSA_PublicKey_UnInit(&pubKey);
}

TEST(RSASSA, PKCS1v15SignVerifyTest)
{
    printf("No PKCS1v15SignVerifyTest\n");
}