#include <stdio.h>
#include "gtest/gtest.h"
#include "gmp.h"
#include "hash.h"
#include "pss.h"
#include "pkcs1-v1_5.h"
#include "rsa.h"
#include "fakerand.h"

// Test Vector: vectors\pkcs-1v2-1-vec\pss-int.txt
// PubKey(n, e), PrivKey(p, q, dP, dQ, qInv)
TEST(RSASSA, PSSSignVerifyTest)
{
    char str_n[]    = "a2ba40ee07e3b2bd2f02ce227f36a195024486e49c19cb41bbbdfbba98b22b0e"
                      "577c2eeaffa20d883a76e65e394c69d4b3c05a1e8fadda27edb2a42bc000fe88"
                      "8b9b32c22d15add0cd76b3e7936e19955b220dd17d4ea904b1ec102b2e4de775"
                      "1222aa99151024c7cb41cc5ea21d00eeb41f7c800834d2c6e06bce3bce7ea9a5";
    char str_e[]    = "010001";
    char str_p[]    = "d17f655bf27c8b16d35462c905cc04a26f37e2a67fa9c0ce0dced472394a0df7"
                      "43fe7f929e378efdb368eddff453cf007af6d948e0ade757371f8a711e278f6b";
    char str_q[]    = "c6d92b6fee7414d1358ce1546fb62987530b90bd15e0f14963a5e2635adb6934"
                      "7ec0c01b2ab1763fd8ac1a592fb22757463a982425bb97a3a437c5bf86d03f2f";
    char str_dP[]   = "9d0dbf83e5ce9e4b1754dcd5cd05bcb7b55f1508330ea49f14d4e889550f8256"
                      "cb5f806dff34b17ada44208853577d08e4262890acf752461cea05547601bc4f";
    char str_dQ[]   = "1291a524c6b7c059e90e46dc83b2171eb3fa98818fd179b6c8bf6cecaa476303"
                      "abf283fe05769cfc495788fe5b1ddfde9e884a3cd5e936b7e955ebf97eb563b1";
    char str_qInv[] = "a63f1da38b950c9ad1c67ce0d677ec2914cd7d40062df42a67eb198a176f9742"
                      "aac7c5fea14f2297662b84812c4defc49a8025ab4382286be4c03788dd01d69f";

    unsigned char salt[] = {
        0xe3, 0xb5, 0xd5, 0xd0, 0x02, 0xc1, 0xbc, 0xe5, 0x0c, 0x2b, 0x65, 0xef, 0x88, 0xa1, 0x88, 0xd8,
        0x3b, 0xce, 0x7e, 0x61
    };
    unsigned char message[] = {
        0x85, 0x9e, 0xef, 0x2f, 0xd7, 0x8a, 0xca, 0x00, 0x30, 0x8b, 0xdc, 0x47, 0x11, 0x93, 0xbf, 0x55,
        0xbf, 0x9d, 0x78, 0xdb, 0x8f, 0x8a, 0x67, 0x2b, 0x48, 0x46, 0x34, 0xf3, 0xc9, 0xc2, 0x6e, 0x64,
        0x78, 0xae, 0x10, 0x26, 0x0f, 0xe0, 0xdd, 0x8c, 0x08, 0x2e, 0x53, 0xa5, 0x29, 0x3a, 0xf2, 0x17,
        0x3c, 0xd5, 0x0c, 0x6d, 0x5d, 0x35, 0x4f, 0xeb, 0xf7, 0x8b, 0x26, 0x02, 0x1c, 0x25, 0xc0, 0x27,
        0x12, 0xe7, 0x8c, 0xd4, 0x69, 0x4c, 0x9f, 0x46, 0x97, 0x77, 0xe4, 0x51, 0xe7, 0xf8, 0xe9, 0xe0,
        0x4c, 0xd3, 0x73, 0x9c, 0x6b, 0xbf, 0xed, 0xae, 0x48, 0x7f, 0xb5, 0x56, 0x44, 0xe9, 0xca, 0x74,
        0xff, 0x77, 0xa5, 0x3c, 0xb7, 0x29, 0x80, 0x2f, 0x6e, 0xd4, 0xa5, 0xff, 0xa8, 0xba, 0x15, 0x98,
        0x90, 0xfc
    };

    unsigned char signature[] = {
        0x8d, 0xaa, 0x62, 0x7d, 0x3d, 0xe7, 0x59, 0x5d, 0x63, 0x05, 0x6c, 0x7e, 0xc6, 0x59, 0xe5, 0x44,
        0x06, 0xf1, 0x06, 0x10, 0x12, 0x8b, 0xaa, 0xe8, 0x21, 0xc8, 0xb2, 0xa0, 0xf3, 0x93, 0x6d, 0x54,
        0xdc, 0x3b, 0xdc, 0xe4, 0x66, 0x89, 0xf6, 0xb7, 0x95, 0x1b, 0xb1, 0x8e, 0x84, 0x05, 0x42, 0x76,
        0x97, 0x18, 0xd5, 0x71, 0x5d, 0x21, 0x0d, 0x85, 0xef, 0xbb, 0x59, 0x61, 0x92, 0x03, 0x2c, 0x42,
        0xbe, 0x4c, 0x29, 0x97, 0x2c, 0x85, 0x62, 0x75, 0xeb, 0x6d, 0x5a, 0x45, 0xf0, 0x5f, 0x51, 0x87,
        0x6f, 0xc6, 0x74, 0x3d, 0xed, 0xdd, 0x28, 0xca, 0xec, 0x9b, 0xb3, 0x0e, 0xa9, 0x9e, 0x02, 0xc3,
        0x48, 0x82, 0x69, 0x60, 0x4f, 0xe4, 0x97, 0xf7, 0x4c, 0xcd, 0x7c, 0x7f, 0xca, 0x16, 0x71, 0x89,
        0x71, 0x23, 0xcb, 0xd3, 0x0d, 0xef, 0x5d, 0x54, 0xa2, 0xb5, 0x53, 0x6a, 0xd9, 0x0a, 0x74, 0x7e
    };

    unsigned char buf[128];
    unsigned long len;
    int res;

    RSAPublicKey pubKey;
    RSAPrivateKey privKey;

    /*
     * Message Signing Test With Priviate Key
     */
    Set_Random_Data(salt, sizeof(salt));

    RSA_PrivateKey_Init_MultiPrime(str_p, str_q, str_dP, str_dQ, str_qInv, &privKey);

    res = RSASSA_PSS_Sign(&privKey, message, sizeof(message), HASH_ALG_SHA1, buf, &len);
    EXPECT_EQ(ERR_OK, res);

    RSA_PrivateKey_UnInit(&privKey);

    /*
     * Signature Verification Test With Public Key
     */
    Set_Random_Data(salt, sizeof(salt));

    RSA_PublicKey_Init(str_n, str_e, &pubKey);

    res = RSASSA_PSS_Verify(&pubKey, message, sizeof(message), HASH_ALG_SHA1, signature, sizeof(signature));
    EXPECT_EQ(ERR_OK, res);

    RSA_PublicKey_UnInit(&pubKey);
}

// Test Vector:
TEST(RSASSA, PSSSignVerifyTest2)
{
    /*
     * key
     */
    char str_n1[] = "bcb47b2e0dafcba81ff2a2b5cb115ca7e757184c9d72bcdcda707a146b3b4e29"
                    "989ddc660bd694865b932b71ca24a335cf4d339c719183e6222e4c9ea6875acd"
                    "528a49ba21863fe08147c3a47e41990b51a03f77d22137f8d74c43a5a45f4e9e"
                    "18a2d15db051dc89385db9cf8374b63a8cc88113710e6d8179075b7dc79ee76b";
    char str_e1[] = "0000000000000000000000000000000000000000000000000000000000000000"
                    "0000000000000000000000000000000000000000000000000000000000000000"
                    "0000000000000000000000000000000000000000000000000000000000000000"
                    "0000000000000000000000000000000000000000000000000000000000010001";
    char str_d1[] = "383a6f19e1ea27fd08c7fbc3bfa684bd6329888c0bbe4c98625e7181f411cfd0"
                    "853144a3039404dda41bce2e31d588ec57c0e148146f0fa65b39008ba5835f82"
                    "9ba35ae2f155d61b8a12581b99c927fd2f22252c5e73cba4a610db3973e019ee"
                    "0f95130d4319ed413432f2e5e20d5215cdd27c2164206b3f80edee51938a25c1";

    /*
     * salt
     */
    unsigned char salt1[] = {
        0x6f, 0x28, 0x41, 0x16, 0x6a, 0x64, 0x47, 0x1d, 0x4f, 0x0b, 0x8e, 0xd0, 0xdb, 0xb7, 0xdb, 0x32,
        0x16, 0x1d, 0xa1, 0x3b
    };

    /*
     * message & signature
     */
    unsigned char message1[] = {
        0x12, 0x48, 0xf6, 0x2a, 0x43, 0x89, 0xf4, 0x2f, 0x7b, 0x4b, 0xb1, 0x31, 0x05, 0x3d, 0x6c, 0x88,
        0xa9, 0x94, 0xdb, 0x20, 0x75, 0xb9, 0x12, 0xcc, 0xbe, 0x3e, 0xa7, 0xdc, 0x61, 0x17, 0x14, 0xf1,
        0x4e, 0x07, 0x5c, 0x10, 0x48, 0x58, 0xf2, 0xf6, 0xe6, 0xcf, 0xd6, 0xab, 0xde, 0xdf, 0x01, 0x5a,
        0x82, 0x1d, 0x03, 0x60, 0x8b, 0xf4, 0xeb, 0xa3, 0x16, 0x9a, 0x67, 0x25, 0xec, 0x42, 0x2c, 0xd9,
        0x06, 0x94, 0x98, 0xb5, 0x51, 0x5a, 0x96, 0x08, 0xae, 0x7c, 0xc3, 0x0e, 0x3d, 0x2e, 0xcf, 0xc1,
        0xdb, 0x68, 0x25, 0xf3, 0xe9, 0x96, 0xce, 0x9a, 0x50, 0x92, 0x92, 0x6b, 0xc1, 0xcf, 0x61, 0xaa,
        0x42, 0xd7, 0xf2, 0x40, 0xe6, 0xf7, 0xaa, 0x0e, 0xdb, 0x38, 0xbf, 0x81, 0xaa, 0x92, 0x9d, 0x66,
        0xbb, 0x5d, 0x89, 0x00, 0x18, 0x08, 0x84, 0x58, 0x72, 0x0d, 0x72, 0xd5, 0x69, 0x24, 0x7b, 0x0c
    };
    unsigned char signature1[] = {
        0x68, 0x2c, 0xf5, 0x3c, 0x11, 0x45, 0xd2, 0x2a, 0x50, 0xca, 0xa9, 0xeb, 0x1a, 0x9b, 0xa7, 0x06,
        0x70, 0xc5, 0x91, 0x5e, 0x0f, 0xdf, 0xde, 0x64, 0x57, 0xa7, 0x65, 0xde, 0x2a, 0x8f, 0xe1, 0x2d,
        0xe9, 0x79, 0x41, 0x72, 0xa7, 0x8d, 0x14, 0xe6, 0x68, 0xd4, 0x98, 0xac, 0xed, 0xad, 0x61, 0x65,
        0x04, 0xbb, 0x17, 0x64, 0xd0, 0x94, 0x60, 0x70, 0x70, 0x08, 0x05, 0x92, 0xc3, 0xa6, 0x9c, 0x34,
        0x3d, 0x98, 0x2b, 0xd7, 0x78, 0x65, 0x87, 0x3d, 0x35, 0xe2, 0x48, 0x22, 0xca, 0xf4, 0x34, 0x43,
        0xcc, 0x10, 0x24, 0x9a, 0xf6, 0xa1, 0xe2, 0x6e, 0xf3, 0x44, 0xf2, 0x8b, 0x9e, 0xf6, 0xf1, 0x4e,
        0x09, 0xad, 0x83, 0x97, 0x48, 0xe5, 0x14, 0x8b, 0xcc, 0xeb, 0x0f, 0xd2, 0xaa, 0x63, 0x70, 0x9c,
        0xb4, 0x89, 0x75, 0xcb, 0xf9, 0xc7, 0xb4, 0x9a, 0xbc, 0x66, 0xa1, 0xdc, 0x6c, 0xb5, 0xb3, 0x1a  
    };

    unsigned char message2[] = {
        0x99, 0x68, 0x80, 0x9a, 0x55, 0x7b, 0xb4, 0xf8, 0x92, 0x03, 0x9f, 0xf2, 0xb6, 0xa0, 0xef, 0xcd,
        0x06, 0x52, 0x36, 0x24, 0xbc, 0x3b, 0x9a, 0xd3, 0x59, 0xa7, 0xcf, 0x14, 0x3c, 0x49, 0x42, 0xe8,
        0x74, 0xc7, 0x97, 0xb9, 0xd3, 0x7a, 0x56, 0x3d, 0x43, 0x6f, 0xe1, 0x9d, 0x5d, 0xb1, 0xaa, 0xd7,
        0x38, 0xca, 0xa2, 0x61, 0x7f, 0x87, 0xf5, 0x0f, 0xc7, 0xfc, 0xf4, 0x36, 0x1f, 0xc8, 0x52, 0x12,
        0xe8, 0x9a, 0x94, 0x65, 0xe7, 0xf4, 0xc3, 0x61, 0x98, 0x2f, 0x64, 0xc8, 0xc5, 0xc0, 0xaa, 0x52,
        0x58, 0xb9, 0xe9, 0x4f, 0x6e, 0x93, 0x4e, 0x8d, 0xac, 0x2a, 0xce, 0x7c, 0xd6, 0x09, 0x5c, 0x90,
        0x9d, 0xe8, 0x5f, 0xe7, 0xb9, 0x73, 0x63, 0x2c, 0x38, 0x4d, 0x0e, 0xbb, 0x16, 0x55, 0x56, 0x05,
        0x0d, 0x28, 0xf2, 0x36, 0xae, 0xe7, 0x0e, 0x16, 0xb1, 0x3a, 0x43, 0x2d, 0x8a, 0x94, 0xc6, 0x2b
    };
    unsigned char signature2[] = {
        0x8f, 0x5e, 0xa7, 0x03, 0x73, 0x67, 0xe0, 0xdb, 0x75, 0x67, 0x05, 0x04, 0x08, 0x57, 0x90, 0xac,
        0xd6, 0xd9, 0x7d, 0x96, 0xf5, 0x1e, 0x76, 0xdf, 0x91, 0x6a, 0x0c, 0x2e, 0x4c, 0xd6, 0x6e, 0x1a,
        0xb5, 0x1c, 0x4c, 0xd8, 0xe2, 0xc3, 0xe4, 0xef, 0x78, 0x1f, 0x63, 0x8a, 0xd6, 0x5d, 0xc4, 0x9c,
        0x8d, 0x6d, 0x7f, 0x69, 0x30, 0xf8, 0x0b, 0x6a, 0xe1, 0x99, 0xea, 0x28, 0x3a, 0x89, 0x24, 0x92,
        0x5a, 0x50, 0xed, 0xab, 0x79, 0xbb, 0x3f, 0x34, 0x86, 0x1f, 0xfa, 0x8b, 0x2f, 0x96, 0xfd, 0xf9,
        0xf8, 0xca, 0xd3, 0xd3, 0xf8, 0xf0, 0x25, 0x47, 0x8c, 0x81, 0xf3, 0x16, 0xda, 0x61, 0xb0, 0xd6,
        0xa7, 0xf7, 0x1b, 0x90, 0x68, 0xef, 0xdf, 0xb3, 0x3c, 0x21, 0x98, 0x3a, 0x92, 0x2f, 0x46, 0x69,
        0x28, 0x0d, 0x8e, 0x84, 0xf9, 0x63, 0xff, 0x88, 0x5e, 0xf5, 0x6d, 0xd3, 0xf5, 0x03, 0x81, 0xdb
    };

    unsigned char message3[] = {
        0xf9, 0xbe, 0x76, 0xe9, 0xb0, 0x29, 0xc4, 0x93, 0x32, 0x60, 0x24, 0x9d, 0xd7, 0x6c, 0x50, 0x67,
        0xcc, 0xd4, 0x83, 0xd4, 0xb9, 0xb3, 0x38, 0xfd, 0xa0, 0x0d, 0x34, 0x27, 0x09, 0x63, 0xc6, 0xf3,
        0x5c, 0x85, 0x4e, 0xd5, 0x8e, 0xa8, 0xfc, 0xc7, 0xff, 0xb8, 0xda, 0x3f, 0xa3, 0xf0, 0x0d, 0x5e,
        0x61, 0xa7, 0x58, 0x6a, 0xb8, 0x6d, 0xe1, 0x7e, 0xa8, 0x56, 0x38, 0x80, 0xd0, 0x96, 0x95, 0x54,
        0xd4, 0x4e, 0x61, 0x4f, 0x01, 0xa6, 0xf8, 0xef, 0x34, 0x1c, 0xae, 0xc9, 0xf7, 0x1c, 0x10, 0xc2,
        0xee, 0xd0, 0x6c, 0x82, 0x72, 0x39, 0x93, 0x26, 0x7b, 0x7f, 0xdd, 0x35, 0xc3, 0x85, 0x6e, 0xd6,
        0x28, 0xc1, 0xb8, 0x40, 0x52, 0x4b, 0x41, 0x71, 0x97, 0x33, 0xa6, 0x23, 0x1b, 0x18, 0xe1, 0xfc,
        0x3c, 0xf6, 0xc7, 0x05, 0x2d, 0x40, 0xd4, 0x5d, 0xe0, 0x2f, 0x2b, 0x2f, 0x2a, 0x59, 0xd9, 0xe1
    };
    unsigned char signature3[] = {
        0x4f, 0x7f, 0xf1, 0x12, 0xa7, 0x93, 0x77, 0x07, 0xd5, 0x29, 0xb5, 0x60, 0x2e, 0x1d, 0x01, 0x7b,
        0x79, 0x73, 0x9b, 0x13, 0x23, 0x4a, 0x72, 0x5d, 0xc3, 0x64, 0x87, 0xe0, 0x5e, 0xe4, 0xf5, 0xe0,
        0x72, 0x27, 0x0b, 0x67, 0x12, 0xb5, 0xf7, 0x1e, 0x47, 0x74, 0x7d, 0xd4, 0xb9, 0xb2, 0x89, 0xdf,
        0x31, 0xf9, 0x1f, 0xc9, 0x7d, 0xb3, 0x9b, 0xa1, 0x46, 0x94, 0xff, 0x89, 0x4b, 0x42, 0x93, 0x25,
        0x55, 0xd0, 0x1d, 0xfd, 0x41, 0x46, 0xa1, 0x67, 0x23, 0x38, 0xcc, 0x60, 0x52, 0x1e, 0x4b, 0x59,
        0x88, 0xfd, 0x22, 0x89, 0x6b, 0x51, 0x2f, 0xaa, 0xf5, 0x88, 0x8d, 0xed, 0xcd, 0x5f, 0x96, 0x62,
        0x31, 0x9e, 0x9f, 0x75, 0x2c, 0x99, 0xc3, 0x41, 0xbe, 0x08, 0xac, 0x2b, 0xd0, 0x34, 0x68, 0x45,
        0xcc, 0xb7, 0x4d, 0x0a, 0x7d, 0x4d, 0x81, 0x65, 0xaa, 0x76, 0x13, 0xb6, 0x68, 0x47, 0x70, 0x2f
    };

    unsigned char buf[128];
    unsigned long len;
    int res;

    RSAPublicKey pubKey;
    RSAPrivateKey privKey;

    /*
     * Message Signing Test With Priviate Key
     */
    Set_Random_Data(salt1, sizeof(salt1));

    RSA_PrivateKey_Init(str_n1, str_d1, &privKey);

    // message1
    res = RSASSA_PSS_Sign(&privKey, message1, sizeof(message1), HASH_ALG_SHA1, buf, &len);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(buf, signature1, len));

    // message2
    res = RSASSA_PSS_Sign(&privKey, message2, sizeof(message2), HASH_ALG_SHA1, buf, &len);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(buf, signature2, len));

    // message3
    res = RSASSA_PSS_Sign(&privKey, message3, sizeof(message3), HASH_ALG_SHA1, buf, &len);
    EXPECT_EQ(ERR_OK, res);
    EXPECT_EQ(0, memcmp(buf, signature3, len));

    RSA_PrivateKey_UnInit(&privKey);

    /*
     * Signature Verification Test With Public Key
     */
    Set_Random_Data(salt1, sizeof(salt1));

    RSA_PublicKey_Init(str_n1, str_e1, &pubKey);

    // message1
    res = RSASSA_PSS_Verify(&pubKey, message1, sizeof(message1), HASH_ALG_SHA1, signature1, sizeof(signature1));
    EXPECT_EQ(ERR_OK, res);

    // message2
    res = RSASSA_PSS_Verify(&pubKey, message2, sizeof(message2), HASH_ALG_SHA1, signature2, sizeof(signature2));
    EXPECT_EQ(ERR_OK, res);

    // message3
    res = RSASSA_PSS_Verify(&pubKey, message3, sizeof(message3), HASH_ALG_SHA1, signature3, sizeof(signature3));
    EXPECT_EQ(ERR_OK, res);

    RSA_PublicKey_UnInit(&pubKey);
}

TEST(RSASSA, PKCS1v15SignVerifyTest)
{
    printf("No PKCS1v15SignVerifyTest\n");
}