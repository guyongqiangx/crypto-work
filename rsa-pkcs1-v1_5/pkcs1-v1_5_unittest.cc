#include <stdio.h>
#include <string.h>
#include "gtest/gtest.h"
#include "gmp.h"
#include "rand.h"
#include "hash.h"
#include "pkcs1-v1_5.h"

#include "utils.h"

TEST(RSAES, PKCS1_v1_5Test)
{
    printf("No PKCS1_v1_5Test!\n");
}

// Test Vector: vectors\186-2rsatestvectors\SigGen15_186-2.txt
TEST(RSAEMSA, PKCS1_v1_5Test)
{
    char str_n[] = "c8a2069182394a2ab7c3f4190c15589c56a2d4bc42dca675b34cc950e2466304"
                   "8441e8aa593b2bc59e198b8c257e882120c62336e5cc745012c7ffb063eebe53"
                   "f3c6504cba6cfe51baa3b6d1074b2f398171f4b1982f4d65caf882ea4d56f32a"
                   "b57d0c44e6ad4e9cf57a4339eb6962406e350c1b15397183fbf1f0353c9fc991";
    char str_e[] = "0000000000000000000000000000000000000000000000000000000000000000"
                   "0000000000000000000000000000000000000000000000000000000000000000"
                   "0000000000000000000000000000000000000000000000000000000000000000"
                   "0000000000000000000000000000000000000000000000000000000000010001";
    char str_d[] = "5dfcb111072d29565ba1db3ec48f57645d9d8804ed598a4d470268a89067a2c9"
                   "21dff24ba2e37a3ce834555000dc868ee6588b7493303528b1b3a94f0b71730c"
                   "f1e86fca5aeedc3afa16f65c0189d810ddcd81049ebbd0391868c50edec958b3"
                   "a2aaeff6a575897e2f20a3ab5455c1bfa55010ac51a7799b1ff8483644a3d425";

    unsigned char message1[] = {
        0xe8, 0x31, 0x27, 0x42, 0xae, 0x23, 0xc4, 0x56, 0xef, 0x28, 0xa2, 0x31, 0x42, 0xc4, 0x49, 0x08,
        0x95, 0x83, 0x27, 0x65, 0xda, 0xdc, 0xe0, 0x2a, 0xfe, 0x5b, 0xe5, 0xd3, 0x1b, 0x00, 0x48, 0xfb,
        0xee, 0xe2, 0xcf, 0x21, 0x8b, 0x17, 0x47, 0xad, 0x4f, 0xd8, 0x1a, 0x2e, 0x17, 0xe1, 0x24, 0xe6,
        0xaf, 0x17, 0xc3, 0x88, 0x8e, 0x6d, 0x2d, 0x40, 0xc0, 0x08, 0x07, 0xf4, 0x23, 0xa2, 0x33, 0xca,
        0xd6, 0x2c, 0xe9, 0xea, 0xef, 0xb7, 0x09, 0x85, 0x6c, 0x94, 0xaf, 0x16, 0x6d, 0xba, 0x08, 0xe7,
        0xa0, 0x69, 0x65, 0xd7, 0xfc, 0x0d, 0x8e, 0x5c, 0xb2, 0x65, 0x59, 0xc4, 0x60, 0xe4, 0x7b, 0xc0,
        0x88, 0x58, 0x9d, 0x22, 0x42, 0xc9, 0xb3, 0xe6, 0x2d, 0xa4, 0x89, 0x6f, 0xab, 0x19, 0x9e, 0x14,
        0x4e, 0xc1, 0x36, 0xdb, 0x8d, 0x84, 0xab, 0x84, 0xbc, 0xba, 0x04, 0xca, 0x3b, 0x90, 0xc8, 0xe5
    };
    unsigned char signature1[] = {
        0x28, 0x92, 0x8e, 0x19, 0xeb, 0x86, 0xf9, 0xc0, 0x00, 0x70, 0xa5, 0x9e, 0xdf, 0x6b, 0xf8, 0x43,
        0x3a, 0x45, 0xdf, 0x49, 0x5c, 0xd1, 0xc7, 0x36, 0x13, 0xc2, 0x12, 0x98, 0x40, 0xf4, 0x8c, 0x4a,
        0x2c, 0x24, 0xf1, 0x1d, 0xf7, 0x9b, 0xc5, 0xc0, 0x78, 0x2b, 0xce, 0xdd, 0xe9, 0x7d, 0xbb, 0xb2,
        0xac, 0xc6, 0xe5, 0x12, 0xd1, 0x9f, 0x08, 0x50, 0x27, 0xcd, 0x57, 0x50, 0x38, 0x45, 0x3d, 0x04,
        0x90, 0x54, 0x13, 0xe9, 0x47, 0xe6, 0xe1, 0xdd, 0xdb, 0xeb, 0x35, 0x35, 0xcd, 0xb3, 0xd8, 0x97,
        0x1f, 0xe0, 0x20, 0x05, 0x06, 0x94, 0x10, 0x56, 0xf2, 0x12, 0x43, 0x50, 0x3c, 0x83, 0xea, 0xdd,
        0xe0, 0x53, 0xed, 0x86, 0x6c, 0x0e, 0x02, 0x50, 0xbe, 0xdd, 0xd9, 0x27, 0xa0, 0x82, 0x12, 0xaa,
        0x8a, 0xc0, 0xef, 0xd6, 0x16, 0x31, 0xef, 0x89, 0xd8, 0xd0, 0x49, 0xef, 0xb3, 0x6b, 0xb3, 0x5f
    };

    unsigned char message2[] = {
        0x4c, 0x95, 0x07, 0x3d, 0xac, 0x19, 0xd0, 0x25, 0x6e, 0xaa, 0xdf, 0xf3, 0x50, 0x59, 0x10, 0xe4,
        0x31, 0xdd, 0x50, 0x01, 0x81, 0x36, 0xaf, 0xea, 0xf6, 0x90, 0xb7, 0xd1, 0x80, 0x69, 0xfc, 0xc9,
        0x80, 0xf6, 0xf5, 0x41, 0x35, 0xc3, 0x0a, 0xcb, 0x76, 0x9b, 0xee, 0x23, 0xa7, 0xa7, 0x2f, 0x6c,
        0xe6, 0xd9, 0x0c, 0xbc, 0x85, 0x8c, 0x86, 0xdb, 0xbd, 0x64, 0xba, 0x48, 0xa0, 0x7c, 0x6d, 0x7d,
        0x50, 0xc0, 0xe9, 0x74, 0x6f, 0x97, 0x08, 0x6a, 0xd6, 0xc6, 0x8e, 0xe3, 0x8a, 0x91, 0xbb, 0xee,
        0xeb, 0x22, 0x21, 0xaa, 0x2f, 0x2f, 0xb4, 0x09, 0x0f, 0xd8, 0x20, 0xd4, 0xc0, 0xce, 0x5f, 0xf0,
        0x25, 0xba, 0x8a, 0xdf, 0x43, 0xdd, 0xef, 0x89, 0xf5, 0xf3, 0x65, 0x3d, 0xe1, 0x5e, 0xdc, 0xf3,
        0xaa, 0x80, 0x38, 0xd4, 0x68, 0x69, 0x60, 0xfc, 0x55, 0xb2, 0x91, 0x7e, 0xc8, 0xa8, 0xf9, 0xa8
    };
    unsigned char signature2[] = {
        0x53, 0xab, 0x60, 0x0a, 0x41, 0xc7, 0x13, 0x93, 0xa2, 0x71, 0xb0, 0xf3, 0x2f, 0x52, 0x19, 0x63,
        0x08, 0x7e, 0x56, 0xeb, 0xd7, 0xad, 0x04, 0x0e, 0x4e, 0xe8, 0xaa, 0x7c, 0x45, 0x0a, 0xd1, 0x8a,
        0xc3, 0xc6, 0xa0, 0x5d, 0x4a, 0xe8, 0x91, 0x3e, 0x76, 0x3c, 0xfe, 0x96, 0x23, 0xbd, 0x9c, 0xb1,
        0xeb, 0x4b, 0xed, 0x1a, 0x38, 0x20, 0x05, 0x00, 0xfa, 0x7d, 0xf3, 0xd9, 0x5d, 0xea, 0x48, 0x5f,
        0x03, 0x2a, 0x0a, 0xb0, 0xc6, 0x58, 0x96, 0x78, 0xf9, 0xe8, 0x39, 0x1b, 0x5c, 0x2b, 0x13, 0x92,
        0x99, 0x7a, 0xc9, 0xf8, 0x2f, 0x1d, 0x16, 0x88, 0x78, 0x91, 0x6a, 0xac, 0xe9, 0xac, 0x74, 0x55,
        0x80, 0x80, 0x56, 0xaf, 0x81, 0x55, 0x23, 0x1a, 0x29, 0xf4, 0x29, 0x04, 0xb7, 0xab, 0x87, 0xa5,
        0xd7, 0x1e, 0xd6, 0x39, 0x5e, 0xe0, 0xa9, 0xd0, 0x24, 0xb0, 0xca, 0x3d, 0x01, 0xfd, 0x71, 0x50
    };

    unsigned char message3[] = {
        0xe0, 0x75, 0xad, 0x4b, 0x0f, 0x9b, 0x5b, 0x20, 0x37, 0x6e, 0x46, 0x7a, 0x1a, 0x35, 0xe3, 0x08,
        0x79, 0x3b, 0xa3, 0x8e, 0xd9, 0x83, 0xd0, 0x38, 0x87, 0xb8, 0xb8, 0x2e, 0xda, 0x63, 0x0e, 0x68,
        0xb8, 0x61, 0x8d, 0xc4, 0x5b, 0x93, 0xde, 0x55, 0x55, 0xd7, 0xbc, 0xfe, 0xd2, 0x37, 0x56, 0x40,
        0x1e, 0x61, 0xf5, 0x51, 0x67, 0x57, 0xde, 0x6e, 0xc3, 0x68, 0x7a, 0x71, 0x75, 0x5f, 0xb4, 0xa6,
        0x6c, 0xfa, 0xa3, 0xdb, 0x0c, 0x9e, 0x69, 0xb6, 0x31, 0x48, 0x5b, 0x4c, 0x71, 0xc7, 0x62, 0xee,
        0xa2, 0x29, 0xa0, 0x46, 0x9c, 0x73, 0x57, 0xa4, 0x40, 0x95, 0x07, 0x92, 0xba, 0x9c, 0xd7, 0xae,
        0x02, 0x2a, 0x36, 0xb9, 0xa9, 0x23, 0xc2, 0xeb, 0xd2, 0xaa, 0x69, 0x89, 0x7f, 0x4c, 0xce, 0xba,
        0x0e, 0x7a, 0xee, 0x97, 0x03, 0x3d, 0x03, 0x81, 0x07, 0x25, 0xa9, 0xb7, 0x31, 0x83, 0x3f, 0x27
    };
    unsigned char signature3[] = {
        0x64, 0x26, 0x09, 0xce, 0x08, 0x4f, 0x47, 0x92, 0x71, 0xdf, 0x59, 0x64, 0x80, 0x25, 0x2e, 0x2f,
        0x89, 0x2b, 0x3e, 0x79, 0x82, 0xdf, 0xf9, 0x59, 0x94, 0xc3, 0xee, 0xda, 0x78, 0x7f, 0x80, 0xf3,
        0xf6, 0x19, 0x8b, 0xbc, 0xe3, 0x3e, 0xc5, 0x51, 0x53, 0x78, 0xd4, 0xb5, 0x71, 0xd7, 0x18, 0x60,
        0x78, 0xb7, 0x5b, 0x43, 0xae, 0xd1, 0x1d, 0x34, 0x25, 0x47, 0x38, 0x6c, 0x56, 0x96, 0xeb, 0x37,
        0x99, 0xa0, 0xb2, 0x84, 0x75, 0xe5, 0x4c, 0xd4, 0xca, 0x7d, 0x03, 0x6d, 0xcd, 0x8a, 0x11, 0xf5,
        0xe1, 0x08, 0x06, 0xf7, 0xd3, 0xb8, 0xcc, 0x4f, 0xcb, 0x3e, 0x93, 0xe8, 0x57, 0xbe, 0x95, 0x83,
        0x44, 0xa3, 0x4e, 0x12, 0x68, 0x09, 0xc1, 0x5b, 0x3d, 0x33, 0x66, 0x1c, 0xf5, 0x7b, 0xf5, 0xc3,
        0x38, 0xf0, 0x7a, 0xcc, 0xed, 0x60, 0xf1, 0x40, 0x19, 0x33, 0x5c, 0x15, 0x2d, 0x86, 0xb3, 0xb2
    };

    mpz_t n, e, d, em, s;
    unsigned char buf[256], EM[256];
    unsigned long count;
    int res;

    mpz_inits(n, e, d, em, s, NULL);
    mpz_set_str(n, str_n, 16);
    mpz_set_str(e, str_e, 16);
    mpz_set_str(d, str_d, 16);

    /*
     * message1 & signature1
     */
    mpz_import(s, sizeof(signature1), 1, 1, 0, 0, signature1);
    mpz_powm(em, s, e, n); /* em = s ^ e mod n */
    gmp_printf("em: %Zx\n", em);

    buf[0] = 0x00; // EM = 0x00 || 0x01 || PS || 0x00 || T
    mpz_export(buf+1, &count, 1, 1, 0, 0, em);
    dump("Decrypt EM1:", buf, count+1);

    res = EMSA_PKCS1_v1_5_Encode(HASH_ALG_SHA1, message1, sizeof(message1), 128, EM);
    EXPECT_EQ(0, res);
    EXPECT_EQ(0, memcmp(buf, EM, 128));
    dump(" Encode EM1:", EM, 128);

    /*
     * message2 & signature2
     */
    mpz_import(s, sizeof(signature2), 1, 1, 0, 0, signature2);
    mpz_powm(em, s, e, n); /* em = s ^ e mod n */
    gmp_printf("em: %Zx\n", em);

    buf[0] = 0x00; // EM = 0x00 || 0x01 || PS || 0x00 || T
    mpz_export(buf+1, &count, 1, 1, 0, 0, em);
    dump("Decrypt EM1:", buf, count+1);

    res = EMSA_PKCS1_v1_5_Encode(HASH_ALG_SHA1, message2, sizeof(message2), 128, EM);
    EXPECT_EQ(0, res);
    EXPECT_EQ(0, memcmp(buf, EM, 128));
    dump(" Encode EM2:", EM, 128);

    /*
     * message3 & signature3
     */
    mpz_import(s, sizeof(signature3), 1, 1, 0, 0, signature3);
    mpz_powm(em, s, e, n); /* em = s ^ e mod n */
    gmp_printf("em: %Zx\n", em);

    buf[0] = 0x00; // EM = 0x00 || 0x01 || PS || 0x00 || T
    mpz_export(buf+1, &count, 1, 1, 0, 0, em);
    dump("Decrypt EM1:", buf, count+1);

    res = EMSA_PKCS1_v1_5_Encode(HASH_ALG_SHA1, message3, sizeof(message3), 128, EM);
    EXPECT_EQ(0, res);
    EXPECT_EQ(0, memcmp(buf, EM, 128));
    dump(" Encode EM3:", EM, 128);

    mpz_clears(n, e, d, em, s, NULL);
}