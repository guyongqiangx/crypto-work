#include <stdio.h>
#include "gtest/gtest.h"
#include "hash.h"
#include "pss.h"
#include "fakerand.h"
#include "utils.h"

/*
 * 缓冲区 data 中按 MSB 方式存放一个大整数, 返回大整数的 bit 位长度
 */
static unsigned long get_bit_length(unsigned char *data, unsigned long len)
{
    int i;
    unsigned long count;

    while ((*data==0) && (len > 0))
    {
        data ++;
        len --;
    }

    if (len == 0)
    {
        return (unsigned long)-1; /* 0xFFFFFFFF */
    }

    count = len * 8;

    for (i=1; i<=8; i++)
    {
        if (data[0] & (1<<(8-i)))
        {
            break;
        }
        else
        {
            count --;
        }
    }

    return count;
}

TEST(ESMA, PSSMiscTest)
{
    /* 1019 bits */
    unsigned char n1[] = {
        0x07, 0x14, 0x85, 0xfa, 0x41, 0x16, 0x38, 0x2a, 0xfe, 0x91, 0x42, 0xd7, 0xd5, 0x58, 0x0d, 0x79,
        0x8a, 0x41, 0xe7, 0xb4, 0xf7, 0x3f, 0x50, 0x56, 0x18, 0x97, 0x80, 0x02, 0xf1, 0x37, 0xf5, 0xc2,
        0x09, 0xfd, 0x1f, 0x37, 0x7e, 0x82, 0x4e, 0x7e, 0x0c, 0x4b, 0x3e, 0x44, 0xdc, 0x1f, 0x8e, 0x25,
        0x02, 0x72, 0xef, 0xdb, 0x71, 0x5a, 0x48, 0xd4, 0x34, 0xd8, 0xa0, 0x1e, 0x39, 0x65, 0xc7, 0xb1,
        0xf6, 0x5a, 0xec, 0x34, 0x9d, 0x96, 0x38, 0x15, 0xd7, 0x89, 0x98, 0x22, 0x1f, 0xc2, 0xc3, 0xbe,
        0x35, 0x08, 0xcc, 0x69, 0xfa, 0x22, 0xb4, 0xfc, 0x3c, 0x9a, 0x23, 0x65, 0x30, 0x9c, 0x5e, 0xae,
        0x72, 0x09, 0x4b, 0x2c, 0x22, 0xae, 0x17, 0x67, 0x04, 0x80, 0x6a, 0x19, 0x94, 0xb7, 0xe4, 0xfe,
        0x51, 0x09, 0x55, 0x8a, 0x0b, 0xfa, 0xd6, 0x96, 0x4b, 0xd7, 0xd6, 0xc1, 0x4c, 0xbd, 0xa7, 0x4b
    };

    /* 1021 bits */
    unsigned char n2[] = {
        0x12, 0x53, 0xe0, 0x4d, 0xc0, 0xa5, 0x39, 0x7b, 0xb4, 0x4a, 0x7a, 0xb8, 0x7e, 0x9b, 0xf2, 0xa0,
        0x39, 0xa3, 0x3d, 0x1e, 0x99, 0x6f, 0xc8, 0x2a, 0x94, 0xcc, 0xd3, 0x00, 0x74, 0xc9, 0x5d, 0xf7,
        0x63, 0x72, 0x20, 0x17, 0x06, 0x9e, 0x52, 0x68, 0xda, 0x5d, 0x1c, 0x0b, 0x4f, 0x87, 0x2c, 0xf6,
        0x53, 0xc1, 0x1d, 0xf8, 0x23, 0x14, 0xa6, 0x79, 0x68, 0xdf, 0xea, 0xe2, 0x8d, 0xef, 0x04, 0xbb,
        0x6d, 0x84, 0xb1, 0xc3, 0x1d, 0x65, 0x4a, 0x19, 0x70, 0xe5, 0x78, 0x3b, 0xd6, 0xeb, 0x96, 0xa0,
        0x24, 0xc2, 0xca, 0x2f, 0x4a, 0x90, 0xfe, 0x9f, 0x2e, 0xf5, 0xc9, 0xc1, 0x40, 0xe5, 0xbb, 0x48,
        0xda, 0x95, 0x36, 0xad, 0x87, 0x00, 0xc8, 0x4f, 0xc9, 0x13, 0x0a, 0xde, 0xa7, 0x4e, 0x55, 0x8d,
        0x51, 0xa7, 0x4d, 0xdf, 0x85, 0xd8, 0xb5, 0x0d, 0xe9, 0x68, 0x38, 0xd6, 0x06, 0x3e, 0x09, 0x55
    };

    /* 17 bits */
    unsigned char n3[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01
    };

    /* 0xFFFFFFFF */
    unsigned char n4[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    EXPECT_EQ(1019ul, get_bit_length(n1, sizeof(n1)));
    EXPECT_EQ(1021ul, get_bit_length(n2, sizeof(n2)));
    EXPECT_EQ(  17ul, get_bit_length(n3, sizeof(n3)));
    EXPECT_EQ(  -1ul, get_bit_length(n4, sizeof(n4))); /* -1ul = (unsigned long)-1 */
}

// Test Vector: vectors\pkcs-1v2-1-vec\pss-int.txt
TEST(EMSA, PSSEncodeVerifyTest)
{
    /*
     * ../vectors/pkcs-1v2-1-vec/pss-int.txt
     */
    unsigned char modulus[] = {
        0xa2, 0xba, 0x40, 0xee, 0x07, 0xe3, 0xb2, 0xbd, 0x2f, 0x02, 0xce, 0x22, 0x7f, 0x36, 0xa1, 0x95,
        0x02, 0x44, 0x86, 0xe4, 0x9c, 0x19, 0xcb, 0x41, 0xbb, 0xbd, 0xfb, 0xba, 0x98, 0xb2, 0x2b, 0x0e,
        0x57, 0x7c, 0x2e, 0xea, 0xff, 0xa2, 0x0d, 0x88, 0x3a, 0x76, 0xe6, 0x5e, 0x39, 0x4c, 0x69, 0xd4,
        0xb3, 0xc0, 0x5a, 0x1e, 0x8f, 0xad, 0xda, 0x27, 0xed, 0xb2, 0xa4, 0x2b, 0xc0, 0x00, 0xfe, 0x88,
        0x8b, 0x9b, 0x32, 0xc2, 0x2d, 0x15, 0xad, 0xd0, 0xcd, 0x76, 0xb3, 0xe7, 0x93, 0x6e, 0x19, 0x95,
        0x5b, 0x22, 0x0d, 0xd1, 0x7d, 0x4e, 0xa9, 0x04, 0xb1, 0xec, 0x10, 0x2b, 0x2e, 0x4d, 0xe7, 0x75,
        0x12, 0x22, 0xaa, 0x99, 0x15, 0x10, 0x24, 0xc7, 0xcb, 0x41, 0xcc, 0x5e, 0xa2, 0x1d, 0x00, 0xee,
        0xb4, 0x1f, 0x7c, 0x80, 0x08, 0x34, 0xd2, 0xc6, 0xe0, 0x6b, 0xce, 0x3b, 0xce, 0x7e, 0xa9, 0xa5
    };
    unsigned char salt[] = {
        0xe3, 0xb5, 0xd5, 0xd0, 0x02, 0xc1, 0xbc, 0xe5, 0x0c, 0x2b, 0x65, 0xef, 0x88, 0xa1, 0x88, 0xd8,
        0x3b, 0xce, 0x7e, 0x61
    };
    unsigned char message[] = {
        0x85, 0x9e, 0xef, 0x2f, 0xd7, 0x8a, 0xca, 0x00, 0x30, 0x8b, 0xdc, 0x47, 0x11, 0x93, 0xbf, 0x55,
        0xbf, 0x9d, 0x78, 0xdb, 0x8f, 0x8a, 0x67, 0x2b, 0x48, 0x46, 0x34, 0xf3, 0xc9, 0xc2, 0x6e, 0x64,
        0x78, 0xae, 0x10, 0x26, 0x0f, 0xe0, 0xdd, 0x8c, 0x08, 0x2e, 0x53, 0xa5, 0x29, 0x3a, 0xf2, 0x17,
        0x3c, 0xd5, 0x0c, 0x6d, 0x5d, 0x35, 0x4f, 0xeb, 0xf7, 0x8b, 0x26, 0x02, 0x1c, 0x25, 0xc0, 0x27,
        0x12, 0xe7, 0x8c, 0xd4, 0x69, 0x4c, 0x9f, 0x46, 0x97, 0x77, 0xe4, 0x51, 0xe7, 0xf8, 0xe9, 0xe0,
        0x4c, 0xd3, 0x73, 0x9c, 0x6b, 0xbf, 0xed, 0xae, 0x48, 0x7f, 0xb5, 0x56, 0x44, 0xe9, 0xca, 0x74,
        0xff, 0x77, 0xa5, 0x3c, 0xb7, 0x29, 0x80, 0x2f, 0x6e, 0xd4, 0xa5, 0xff, 0xa8, 0xba, 0x15, 0x98,
        0x90, 0xfc
    };
    unsigned char encode_message[] = {
        0x66, 0xe4, 0x67, 0x2e, 0x83, 0x6a, 0xd1, 0x21, 0xba, 0x24, 0x4b, 0xed, 0x65, 0x76, 0xb8, 0x67,
        0xd9, 0xa4, 0x47, 0xc2, 0x8a, 0x6e, 0x66, 0xa5, 0xb8, 0x7d, 0xee, 0x7f, 0xbc, 0x7e, 0x65, 0xaf,
        0x50, 0x57, 0xf8, 0x6f, 0xae, 0x89, 0x84, 0xd9, 0xba, 0x7f, 0x96, 0x9a, 0xd6, 0xfe, 0x02, 0xa4,
        0xd7, 0x5f, 0x74, 0x45, 0xfe, 0xfd, 0xd8, 0x5b, 0x6d, 0x3a, 0x47, 0x7c, 0x28, 0xd2, 0x4b, 0xa1,
        0xe3, 0x75, 0x6f, 0x79, 0x2d, 0xd1, 0xdc, 0xe8, 0xca, 0x94, 0x44, 0x0e, 0xcb, 0x52, 0x79, 0xec,
        0xd3, 0x18, 0x3a, 0x31, 0x1f, 0xc8, 0x96, 0xda, 0x1c, 0xb3, 0x93, 0x11, 0xaf, 0x37, 0xea, 0x4a,
        0x75, 0xe2, 0x4b, 0xdb, 0xfd, 0x5c, 0x1d, 0xa0, 0xde, 0x7c, 0xec, 0xdf, 0x1a, 0x89, 0x6f, 0x9d,
        0x8b, 0xc8, 0x16, 0xd9, 0x7c, 0xd7, 0xa2, 0xc4, 0x3b, 0xad, 0x54, 0x6f, 0xbe, 0x8c, 0xfe, 0xbc
    };

    unsigned long k, modBits, emLen;
    unsigned char buf[256];
    int res = 0;

    Set_Random_Data(salt, sizeof(salt));

    k = sizeof(modulus);
    modBits = get_bit_length(modulus, k);
    emLen = (modBits + 7)/8;

    /*
     * PSS Encode Test
     */
    res = PSS_Encode(HASH_ALG_SHA1, message, sizeof(message), sizeof(salt), buf, emLen, modBits-1);
    EXPECT_EQ(0, res);

    /*
     * PSS Verify Test
     */
    res = PSS_Verify(HASH_ALG_SHA1, message, sizeof(message), sizeof(salt), encode_message, sizeof(encode_message), modBits-1);
    EXPECT_EQ(0, res);
}
