// g++ integer_ext_euclidean_alg.c -o int_gcd -Igtest/include -Lgtest/lib -lgtest_main -lgtest -lpthread
#include <stdio.h>
#include <gtest/gtest.h>
#include "gcd.h"

/*
 * 格式化打印值 p 代表的多项式:
 * 0x0000: 0
 * 0x0001: 1
 * 0x0002: x^1
 * 0x0003: x^1  + 1
 * 0x0004: x^2
 * 0x0013: x^4  + x^1  + 1
 * 0x00cc: x^7  + x^6  + x^3  + x^2
 * 0x0d94: x^11 + x^10 + x^8  + x^7  + x^4  + x^2
 */
static void show_polynomial(int p)
{
    int z[32], i;

    // 从最高位开始, 逐位检查多项式系数
    for (i=0; i<32; i++)
    {
        if (p & (1<<(31-i)))
        {
            z[i] = 1;
        }
        else
        {
            z[i] = 0;
        }
    }

    printf("0x%04x: ", p);

    // 找到最高次项
    i = 0;
    while (z[i] == 0)
    {
        i++;
    }

    if (i < 31)
    {
        printf("x^%-2d", 31-i);

        // 打印中间次项
        while (++i < 31)
        {
            if (z[i])
            {
                printf(" + x^%-2d", 31-i);
            }
        }

        // 打印最后一项 "+ 1"
        if (z[i])
        {
            printf(" + 1");
        }
    }
    else if (i == 31)
    {
        printf("1");
    }
    else /* i == 32, p = 0 */
    {
        printf("0");
    }

    printf("\n");
}

static void show_sbox(int arr[256])
{
    int x, y;

    printf("  ");
    for (x=0; x<16; x++)
    {
        printf(" %2X", x);
    }
    printf("\n");

    for (x=0; x<16; x++)
    {
        printf("%2X ", x);
        for (y=0; y<16; y++)
        {
            printf(" %02X", arr[16 * x + y]);
        }
        printf("\n");
    }
}

TEST(PolyGCDTest, CompositeTest)
{
    /* 0x7f = 0x17 x 0x0d + 0x06 */
    EXPECT_EQ(0x0d, poly_gcd(0x7f, 0x17));

    EXPECT_EQ(0x0f, poly_gcd(0x11, 0x0f));
    EXPECT_EQ(0x03, poly_gcd(0x03, 0x0f));
    EXPECT_EQ(0x03, poly_gcd(0x0f, 0x03));
}

TEST(PolyGCDTest, PrimeTest)
{
    EXPECT_EQ(1, poly_gcd(0x13, 0x11b));
    EXPECT_EQ(1, poly_gcd(0x83, 0x11b));
    EXPECT_EQ(0x01, poly_gcd(0x2b79, 0x11b));
}

TEST(PolyExtEuclideanTest, GCDTest)
{
    int ia, ib;

    EXPECT_EQ(0x0d, poly_gcd_ex(0x7f, 0x17, &ia, &ib));
    EXPECT_EQ(0x0d, poly_gcd_ex(0x17, 0x7f, &ia, &ib));

    EXPECT_EQ(1, poly_gcd_ex(0x13, 0x11b, &ia, &ib));
    EXPECT_EQ(1, poly_gcd_ex(0x11b, 0x13, &ia, &ib));

    EXPECT_EQ(1, poly_gcd_ex(0x2b79, 0x11b, &ia, &ib));

    EXPECT_EQ(0x03, poly_gcd_ex(0x03, 0x0f, &ia, &ib));
    EXPECT_EQ(0x0f, poly_gcd_ex(0x11, 0x0f, &ia, &ib));
}

TEST(PolyExtEuclideanTest, InverseTest)
{
    int res, ia, ib;

    res = poly_gcd_ex(0x7f, 0x17, &ia, &ib);
    EXPECT_EQ(0x0d, res);
    //EXPECT_EQ(9, ia);
    //EXPECT_EQ(-31, ib);

    res = poly_gcd_ex(0x2b79, 0x11b, &ia, &ib);
    EXPECT_EQ(1, res);

    res = poly_gcd_ex(0x11, 0x0f, &ia, &ib);
    EXPECT_EQ(0x0f, res);
}

TEST(PolyInverseTest, InverseTest)
{
    int i;
    /*
     * 自然数 0~255 基于 AES 不可约多项式 ( 0x11b: p(x) = x^8 + x^4 + x^3 + x + 1 ) 的乘法逆元
     */
    int inv[256] =
    {
        0x00, 0x01, 0x8D, 0xF6, 0xCB, 0x52, 0x7B, 0xD1, 0xE8, 0x4F, 0x29, 0xC0, 0xB0, 0xE1, 0xE5, 0xC7,
        0x74, 0xB4, 0xAA, 0x4B, 0x99, 0x2B, 0x60, 0x5F, 0x58, 0x3F, 0xFD, 0xCC, 0xFF, 0x40, 0xEE, 0xB2,
        0x3A, 0x6E, 0x5A, 0xF1, 0x55, 0x4D, 0xA8, 0xC9, 0xC1, 0x0A, 0x98, 0x15, 0x30, 0x44, 0xA2, 0xC2,
        0x2C, 0x45, 0x92, 0x6C, 0xF3, 0x39, 0x66, 0x42, 0xF2, 0x35, 0x20, 0x6F, 0x77, 0xBB, 0x59, 0x19,
        0x1D, 0xFE, 0x37, 0x67, 0x2D, 0x31, 0xF5, 0x69, 0xA7, 0x64, 0xAB, 0x13, 0x54, 0x25, 0xE9, 0x09,
        0xED, 0x5C, 0x05, 0xCA, 0x4C, 0x24, 0x87, 0xBF, 0x18, 0x3E, 0x22, 0xF0, 0x51, 0xEC, 0x61, 0x17,
        0x16, 0x5E, 0xAF, 0xD3, 0x49, 0xA6, 0x36, 0x43, 0xF4, 0x47, 0x91, 0xDF, 0x33, 0x93, 0x21, 0x3B,
        0x79, 0xB7, 0x97, 0x85, 0x10, 0xB5, 0xBA, 0x3C, 0xB6, 0x70, 0xD0, 0x06, 0xA1, 0xFA, 0x81, 0x82,
        0x83, 0x7E, 0x7F, 0x80, 0x96, 0x73, 0xBE, 0x56, 0x9B, 0x9E, 0x95, 0xD9, 0xF7, 0x02, 0xB9, 0xA4,
        0xDE, 0x6A, 0x32, 0x6D, 0xD8, 0x8A, 0x84, 0x72, 0x2A, 0x14, 0x9F, 0x88, 0xF9, 0xDC, 0x89, 0x9A,
        0xFB, 0x7C, 0x2E, 0xC3, 0x8F, 0xB8, 0x65, 0x48, 0x26, 0xC8, 0x12, 0x4A, 0xCE, 0xE7, 0xD2, 0x62,
        0x0C, 0xE0, 0x1F, 0xEF, 0x11, 0x75, 0x78, 0x71, 0xA5, 0x8E, 0x76, 0x3D, 0xBD, 0xBC, 0x86, 0x57,
        0x0B, 0x28, 0x2F, 0xA3, 0xDA, 0xD4, 0xE4, 0x0F, 0xA9, 0x27, 0x53, 0x04, 0x1B, 0xFC, 0xAC, 0xE6,
        0x7A, 0x07, 0xAE, 0x63, 0xC5, 0xDB, 0xE2, 0xEA, 0x94, 0x8B, 0xC4, 0xD5, 0x9D, 0xF8, 0x90, 0x6B,
        0xB1, 0x0D, 0xD6, 0xEB, 0xC6, 0x0E, 0xCF, 0xAD, 0x08, 0x4E, 0xD7, 0xE3, 0x5D, 0x50, 0x1E, 0xB3,
        0x5B, 0x23, 0x38, 0x34, 0x68, 0x46, 0x03, 0x8C, 0xDD, 0x9C, 0x7D, 0xA0, 0xCD, 0x1A, 0x41, 0x1C,
    };

    for (i=0; i<256; i++)
    {
        EXPECT_EQ(inv[i], poly_inv(i, 0x11b));
    }
}